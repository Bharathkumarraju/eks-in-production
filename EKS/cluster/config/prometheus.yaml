# Create default rules for monitoring the cluster
# Disable rules for unreachable components
defaultRules:
  rules:
    etcd: false
    kubeScheduler: false

# Disable component scraping for the kube controller manager, etcd, and kube-scheduler
# These components are not reachable on EKS
kubeControllerManager:
  enabled: false
kubeEtcd:
  enabled: false
kubeScheduler:
  enabled: false

alertmanager:
  config:
    global:
      slack_api_url: "https://hooks.slack.com/services/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"
    route:
      receiver: "slack"
    receivers:
      - name: "null"
      - name: "slack"
        slack_configs:
          - channel: "#k8s-observability"
            send_resolved: true
            title: |-
              [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}
            text: |-
              {{ range .Alerts }}
                *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
                *Description:* {{ .Annotations.description }}
                *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:>
                *Details:*
                {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                {{ end }}
              {{ end }}
  alertmanagerSpec:
    logFormat: json
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: gp3
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 1Gi
    resources:
      cpu: 10m
      memory: 32Mi

grafana:
  enabled: false

prometheusOperator:
  logFormat: json
  logLevel: error
  resources:
    requests:
      cpu: 10m
      memory: 32Mi
  prometheusConfigReloader:
    resources:
      cpu: 10m
      memory: 32Mi

prometheus:
  thanosService:
    enabled: true
  prometheusSpec:
    disableCompaction: true
    enableRemoteWriteReceiver: true
    retention: 6h
    replicas: 1
    walCompression: false
    logFormat: json
    resources:
      requests:
        memory: 1Gi
        cpu: 200m
    storageSpec:
     volumeClaimTemplate:
        spec:
          storageClassName: gp3
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 20Gi
    thanos:
      objectStorageConfig:
        key: "thanos-storage-config.yaml"
        name: "thanos-objstore-config"

prometheus-node-exporter:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
            - key: eks.amazonaws.com/compute-type
              operator: NotIn
              values:
                - fargate
